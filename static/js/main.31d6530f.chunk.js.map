{"version":3,"sources":["components/bell.mp3","components/Countdown.js","components/Timer.js","components/IntervalTimer.js","components/Values.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","Timer","props","doIntervalChange","myInterval","setInterval","setState","prevState","count","state","text","countArr","bell","UIfx","bellAudio","volume","throttleMs","this","play","console","log","next","shift","clearInterval","IntervalTimer","hang","rest1","reps1","rest2","reps2","timerArr","arr","i","j","push","Values","handleSubmit","event","preventDefault","hasSubmitted","data","onSubmit","onChange","value","name","min","max","format","secFormat","repFormat","num","App","className","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,uLCGnBC,Y,iCCsETC,E,YApEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAsDVC,iBAAmB,WACf,EAAKC,WAAaC,aAAY,WAC1B,EAAKC,UAAS,SAAAC,GAAS,MAAK,CACxBC,MAAOD,EAAUC,MAAQ,QAE9B,MA1DH,EAAKC,MAAQ,CACTD,MAAO,EACPE,KAAM,YACNC,SAAU,IALC,E,sEAWf,IAAMC,EAAO,IAAIC,IACbC,IACA,CACIC,OAAQ,GACRC,WAAY,MAIbR,EAASS,KAAKR,MAAdD,MACAE,EAAQO,KAAKR,MAAbC,KAEP,GAAIF,EAAQ,EAAG,CACXI,EAAKM,OACLC,QAAQC,IAAIH,KAAKR,MAAME,UACvB,IAAIU,EAAOJ,KAAKR,MAAME,SAASW,QAC/BH,QAAQC,IAAIC,GACZJ,KAAKX,SAAS,CACVE,MAAOa,EAAK,GACZX,KAAMW,EAAK,KAInB,OACI,6BACI,4BAAKX,GACL,4BAAKF,EAAL,Q,0CAQQS,KAAKf,MAAdM,MACQS,KAAKf,MAAbQ,KAFU,IAGVC,EAAYM,KAAKf,MAAjBS,SACPM,KAAKX,SAAS,CACVE,MAAO,EACPE,KAAM,YACNC,SAAUA,IAEdM,KAAKd,qB,6CAYLoB,cAAcN,KAAKb,gB,GAjEPJ,a,gBC8DLwB,E,YA9DX,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KACDO,MAAQ,CACTgB,KAAM,EAAKvB,MAAMuB,KACjBC,MAAO,EAAKxB,MAAMwB,MAClBC,MAAO,EAAKzB,MAAMyB,MAClBC,MAAO,EAAK1B,MAAM0B,MAClBC,MAAO,EAAK3B,MAAM2B,MAElBC,SAAU,IATC,E,kFAkCfX,QAAQC,IAAIH,KAAKR,OAGjB,IAFA,IAAMsB,EAAM,GAEHC,EAAI,EAAGA,EAAIf,KAAKR,MAAMoB,MAAOG,IAAK,CACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,KAAKR,MAAMkB,MAAOM,IAClCF,EAAIG,KAAK,CAACjB,KAAKR,MAAMgB,KAAM,SAC3BM,EAAIG,KAAK,CAACjB,KAAKR,MAAMiB,MAAO,SAC5BP,QAAQC,IAAI,cAEhBW,EAAIG,KAAK,CAACjB,KAAKR,MAAMmB,MAAO,SAEhCT,QAAQC,IAAIW,GACZd,KAAKX,SAAS,CACVwB,SAAUC,IAEdZ,QAAQC,IAAIH,KAAKR,MAAMqB,Y,+BAIvB,OACI,6BACKX,QAAQC,IAAI,gBAAkBH,KAAKR,MAAMqB,UAC1C,kBAAC,EAAD,CAAOnB,SAAUM,KAAKR,MAAMqB,gB,GAzDhB9B,aC0EbmC,E,YAxEX,WAAYjC,GAAQ,IAAD,8BACf,4CAAMA,KAYVkC,aAAe,SAACC,GACZA,EAAMC,iBACN,EAAKhC,SAAS,CAACiC,cAAc,IAC7B,IAAMC,EAAO,EAAK/B,MAClBU,QAAQC,IAAIoB,IAfZ,EAAK/B,MAAQ,CACTgB,KAAM,KACNC,MAAO,KACPC,MAAO,KACPC,MAAO,KACPC,MAAO,KAEPU,cAAc,GATH,E,iFAqBftB,KAAKX,SAAS,CACVmB,KAAM,GACNC,MAAO,GACPC,MAAO,EACPC,MAAO,IACPC,MAAO,M,+BAIL,IAEFW,EAFC,OA0BL,OArBIA,EAJiBvB,KAAKR,MAAM8B,aAIrB,kBAAC,EAAD,CAAed,KAAMR,KAAKR,MAAMgB,KAAMC,MAAOT,KAAKR,MAAMiB,MAAOC,MAAOV,KAAKR,MAAMkB,MAClEC,MAAOX,KAAKR,MAAMmB,MAAOC,MAAOZ,KAAKR,MAAMoB,QAE1D,0BAAMY,SAAUxB,KAAKmB,cACxB,kCAAO,kBAAC,IAAD,CAAcM,SAAU,SAAAC,GAAK,OAAI,EAAKrC,SAAS,CAACmB,KAAMkB,KAASC,KAAK,OAAOC,IAAK,EAAGC,IAAK,IAC1EH,MAAO1B,KAAKR,MAAMgB,KAAMsB,OAAQC,KACrD,kCAAO,kBAAC,IAAD,CAAcN,SAAU,SAAAC,GAAK,OAAI,EAAKrC,SAAS,CAACoB,MAAOiB,KAASC,KAAK,QAAQC,IAAK,EACpEC,IAAK,IAAKH,MAAO1B,KAAKR,MAAMiB,MAAOqB,OAAQC,KAChE,kCAAO,kBAAC,IAAD,CAAcN,SAAU,SAAAC,GAAK,OAAI,EAAKrC,SAAS,CAACqB,MAAOgB,KAASC,KAAK,QAAQC,IAAK,EACpEC,IAAK,IAAKH,MAAO1B,KAAKR,MAAMkB,MAAOoB,OAAQE,KAChE,6BACA,kCAAO,kBAAC,IAAD,CAAcP,SAAU,SAAAC,GAAK,OAAI,EAAKrC,SAAS,CAACsB,MAAOe,KAASC,KAAK,QAAQC,IAAK,EACpEC,IAAK,IAAKH,MAAO1B,KAAKR,MAAMmB,MAAOmB,OAAQC,KAChE,kCAAO,kBAAC,IAAD,CAAcN,SAAU,SAAAC,GAAK,OAAI,EAAKrC,SAAS,CAACuB,MAAOc,KAASC,KAAK,QAAQC,IAAK,EACpEC,IAAK,IAAKH,MAAO1B,KAAKR,MAAMoB,MAAOkB,OAAQE,KAChE,2BACI,iDAMR,6BACKT,GAIT,SAASQ,EAAUE,GACf,OAAOA,EAAM,IAGjB,SAASD,EAAUC,GACf,OAAOA,EAAM,a,GApEJlD,aCcNmD,E,iLATP,OACI,yBAAKC,UAAU,OACX,+CACA,kBAAC,EAAD,W,GALEC,IAAMrD,WCKJsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.31d6530f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bell.cdaefc7c.mp3\";","import React, {Component} from \"react\";\nimport '../App.css';\n\nclass Countdown extends Component {\n    state = {\n        timerOn: false,\n        timerStart: 0,\n        timerTime: 0\n    };\n    startTimer = () => {\n        this.setState({\n            timerOn: true,\n            timerTime: this.state.timerTime,\n            timerStart: this.state.timerTime\n        });\n        this.timer = setInterval(() => {\n            const newTime = this.state.timerTime - 10;\n            if (newTime >= 0) {\n                this.setState({\n                    timerTime: newTime\n                });\n            } else {\n                clearInterval(this.timer);\n                this.setState({timerOn: false});\n                alert(\"Countdown ended\");\n            }\n        }, 10);\n    };\n    stopTimer = () => {\n        clearInterval(this.timer);\n        this.setState({timerOn: false});\n    };\n    resetTimer = () => {\n        if (this.state.timerOn === false) {\n            this.setState({\n                timerTime: this.state.timerStart\n            });\n        }\n    };\n    adjustTimer = input => {\n        const {timerTime, timerOn} = this.state;\n        const max = 216000000;\n        if (!timerOn) {\n            if (input === \"incHours\" && timerTime + 3600000 < max) {\n                this.setState({timerTime: timerTime + 3600000});\n            } else if (input === \"decHours\" && timerTime - 3600000 >= 0) {\n                this.setState({timerTime: timerTime - 3600000});\n            } else if (input === \"incMinutes\" && timerTime + 60000 < max) {\n                this.setState({timerTime: timerTime + 60000});\n            } else if (input === \"decMinutes\" && timerTime - 60000 >= 0) {\n                this.setState({timerTime: timerTime - 60000});\n            } else if (input === \"incSeconds\" && timerTime + 1000 < max) {\n                this.setState({timerTime: timerTime + 1000});\n            } else if (input === \"decSeconds\" && timerTime - 1000 >= 0) {\n                this.setState({timerTime: timerTime - 1000});\n            }\n        }\n    };\n\n    render() {\n        const {timerTime, timerStart, timerOn} = this.state;\n        let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2);\n        let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2);\n        let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2);\n        return (\n            <div className=\"Countdown\">\n                <div className=\"Countdown-label\">Hours : Minutes : Seconds</div>\n                <div className=\"Countdown-display\">\n                    <button onClick={() => this.adjustTimer(\"incHours\")}>&#8679;</button>\n                    <button onClick={() => this.adjustTimer(\"incMinutes\")}>&#8679;</button>\n                    <button onClick={() => this.adjustTimer(\"incSeconds\")}>&#8679;</button>\n                    <div className=\"Countdown-time\">\n                        {hours} : {minutes} : {seconds}\n                    </div>\n                    <button onClick={() => this.adjustTimer(\"decHours\")}>&#8681;</button>\n                    <button onClick={() => this.adjustTimer(\"decMinutes\")}>&#8681;</button>\n                    <button onClick={() => this.adjustTimer(\"decSeconds\")}>&#8681;</button>\n                </div>\n                {timerOn === false &&\n                (timerStart === 0 || timerTime === timerStart) && (\n                    <button onClick={this.startTimer}>Start</button>\n                )}\n                {timerOn === true && timerTime >= 1000 && (\n                    <button onClick={this.stopTimer}>Stop</button>\n                )}\n                {timerOn === false &&\n                (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n                    <button onClick={this.startTimer}>Resume</button>\n                )}\n                {(timerOn === false || timerTime < 1000) &&\n                (timerStart !== timerTime && timerStart > 0) && (\n                    <button onClick={this.resetTimer}>Reset</button>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Countdown;","import React, {Component} from 'react'\nimport UIfx from 'uifx'\nimport bellAudio from './bell.mp3'\n\nclass Timer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            count: 1,\n            text: 'undefined',\n            countArr: []\n        }\n    }\n\n\n    render() {\n        const bell = new UIfx(\n            bellAudio,\n            {\n                volume: 0.4, // number between 0.0 ~ 1.0\n                throttleMs: 100\n            }\n        )\n\n        const {count} = this.state\n        const {text} = this.state\n\n        if (count < 0) {\n            bell.play()\n            console.log(this.state.countArr)\n            let next = this.state.countArr.shift()\n            console.log(next)\n            this.setState({\n                count: next[0],\n                text: next[1]\n            })\n        }\n\n        return (\n            <div>\n                <h3>{text}</h3>\n                <h3>{count}s</h3>\n            </div>\n        );\n    }\n\n    // setInterval\n    // clearInterval\n    componentDidMount() {\n        const {count} = this.props\n        const {text} = this.props\n        const {countArr} = this.props\n        this.setState({\n            count: 3, //3sek to ready up\n            text: 'Get ready',\n            countArr: countArr\n        })\n        this.doIntervalChange()\n    }\n\n    doIntervalChange = () => {\n        this.myInterval = setInterval(() => {\n            this.setState(prevState => ({\n                count: prevState.count - 1\n            }))\n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.myInterval)\n    }\n}\n\nexport default Timer","import React, {Component} from 'react'\nimport Timer from \"./Timer\"\n\nclass IntervalTimer extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            hang: this.props.hang,\n            rest1: this.props.rest1,\n            reps1: this.props.reps1,\n            rest2: this.props.rest2,\n            reps2: this.props.reps2,\n\n            timerArr: []\n        }\n\n    }\n    /*\n    componentWillMount() {\n        const {hang} = this.props\n        const {rest1} = this.props\n        const {reps1} = this.props\n        const {rest2} = this.props\n        const {reps2} = this.props\n        console.log('lol wtf')\n\n        this.setState({\n            hang: hang,\n            rest1: rest1,\n            reps1: reps1,\n            rest2: rest2,\n            reps2: reps2\n        })\n        console.log('hangtime: ' + this.state.hang)\n        this.createArr()\n    } */\n\n    componentWillMount() {\n        console.log(this.state)\n        const arr = []\n\n        for (let i = 0; i < this.state.reps2; i++) {\n            for (let j = 0; j < this.state.reps1; j++) {\n                arr.push([this.state.hang, 'work'])\n                arr.push([this.state.rest1, 'rest'])\n                console.log('its happen')\n            }\n            arr.push([this.state.rest2, 'rest'])\n        }\n        console.log(arr)\n        this.setState({\n            timerArr: arr\n        })\n        console.log(this.state.timerArr)\n    }\n\n    render() {\n        return(\n            <div>\n                {console.log(\"from render: \" + this.state.timerArr)}\n                <Timer countArr={this.state.timerArr}/>\n            </div>\n        )\n    }\n}\n\nexport default IntervalTimer","import React, {Component} from 'react'\nimport NumericInput from 'react-numeric-input';\nimport IntervalTimer from './IntervalTimer'\n\nclass Values extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hang: null,\n            rest1: null,\n            reps1: null,\n            rest2: null,\n            reps2: null,\n\n            hasSubmitted: false\n        }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        this.setState({hasSubmitted: true})\n        const data = this.state\n        console.log(data)\n    }\n\n    componentDidMount() {\n        this.setState({\n            hang: 10,\n            rest1: 30,\n            reps1: 4,\n            rest2: 120,\n            reps2: 4\n        })\n    }\n\n    render() {\n        const hasSubmitted = this.state.hasSubmitted\n        let data\n\n        if (hasSubmitted) {\n            data = <IntervalTimer hang={this.state.hang} rest1={this.state.rest1} reps1={this.state.reps1}\n                                  rest2={this.state.rest2} reps2={this.state.reps2}/>\n        } else {\n            data = <form onSubmit={this.handleSubmit}>\n                <p>hang<NumericInput onChange={value => this.setState({hang: value})} name='hang' min={0} max={100}\n                                     value={this.state.hang} format={secFormat}/></p>\n                <p>rest<NumericInput onChange={value => this.setState({rest1: value})} name='rest1' min={0}\n                                     max={100} value={this.state.rest1} format={secFormat}/></p>\n                <p>reps<NumericInput onChange={value => this.setState({reps1: value})} name='reps1' min={0}\n                                     max={100} value={this.state.reps1} format={repFormat}/></p>\n                <br></br>\n                <p>rest<NumericInput onChange={value => this.setState({rest2: value})} name='rest2' min={0}\n                                     max={300} value={this.state.rest2} format={secFormat}/></p>\n                <p>reps<NumericInput onChange={value => this.setState({reps2: value})} name='reps2' min={0}\n                                     max={100} value={this.state.reps2} format={repFormat}/></p>\n                <p>\n                    <button>Start timer</button>\n                </p>\n            </form>\n        }\n\n        return (\n            <div>\n                {data}\n            </div>\n        )\n\n        function secFormat(num) {\n            return num + 's';\n        }\n\n        function repFormat(num) {\n            return num + ' reps'\n        }\n    }\n}\n\nexport default Values","import React, {Component} from \"react\";\nimport './App.css';\n\nimport Countdown from \"./components/Countdown\";\nimport Timer from \"./components/Timer\"\nimport Values from \"./components/Values\"\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Hangboard-timer</h1>\n                <Values/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}